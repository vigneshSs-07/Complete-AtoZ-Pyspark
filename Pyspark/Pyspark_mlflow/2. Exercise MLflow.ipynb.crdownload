{"cells":[{"cell_type":"markdown","source":["# Exercise MLflow\nIn this exercise we will uses the `diabetes` dataset in scikit-learn and predicts the progression metric (a quantitative measure of disease progression after one year after) based on BMI, blood pressure, etc. We will uses the scikit-learn ElasticNet linear regression model, where we vary the `alpha` and `l1_ratio` parameters for tuning. We will use MLflow to log  metrics, parameters, artifacts and model. For more information on ElasticNet, refer to:\n  * [Elastic net regularization](https://en.wikipedia.org/wiki/Elastic_net_regularization)\n  * [Regularization and Variable Selection via the Elastic Net](https://web.stanford.edu/~hastie/TALKS/enet_talk.pdf)\n\n\n**Required Libraries**: \n* `mlflow==1.7.0` via PyPI"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"696a4038-9aa2-4372-800f-7c13cba936c4"}}},{"cell_type":"code","source":["%run \"../Includes/Classroom-Setup\""],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"85091316-f6ef-4c65-8872-eb3aad2ec8de"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the learning environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the learning environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Scala environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Scala environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Scala environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Scala environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Python environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Python environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Python environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Python environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining courseware-specific utility methods...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining courseware-specific utility methods..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining courseware-specific utility methods...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining courseware-specific utility methods..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining user-facing utility methods...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining user-facing utility methods..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining custom variables for this lesson...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining custom variables for this lesson..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining custom variables for this lesson...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining custom variables for this lesson..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's testing framework...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's testing framework..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's testing framework...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's testing framework..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's services for generating dynamic data...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's services for generating dynamic data..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's services for generating dynamic data...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's services for generating dynamic data..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Mounting course-specific datasets to <b>/mnt/training</b>...</br>Datasets are already mounted to <b>/mnt/training</b> from <b>wasbs://training@dbtraineastus.blob.core.windows.net/</b>","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Mounting course-specific datasets to <b>/mnt/training</b>...</br>Datasets are already mounted to <b>/mnt/training</b> from <b>wasbs://training@dbtraineastus.blob.core.windows.net/</b>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Cleaning up the learning environment...no actions taken.","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Cleaning up the learning environment...no actions taken."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Cleaning up the learning environment...no actions taken.","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Cleaning up the learning environment...no actions taken."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"\n    ","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["\n    "]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"\n    ","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["\n    "]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"The following functions were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('waitForMLflow').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">waitForMLflow</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\"></span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"waitForMLflow\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">MLflow is an open source platform to manage the ML lifecycle, including experimentation, reproducibility and deployment</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('display_run_uri').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">display_run_uri</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">experiment_id, run_id</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"display_run_uri\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Experiment and run ids</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('plot_confusion_matrix').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">plot_confusion_matrix</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">y_true, y_pred, classes, title=None, cmap=plt.cm.Blues</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"plot_confusion_matrix\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Confusion matrix</div>\n        </li></ul>The following variables were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('username').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">username</span>: <span style=\"font-style:italic; font-weight:bold\">vsekar@cloudseclab2.com </span>\n        <div id=\"username\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('workingDir').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">workingDir</span>: <span style=\"font-style:italic; font-weight:bold\">dbfs:/user/vsekar@cloudseclab2.com/deep_learning/2_exercise_mlflow_pil </span>\n        <div id=\"workingDir\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/user/vsekar@cloudseclab2.com/deep_learning/2_exercise_mlflow_pil </span>\n        <div id=\"working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is working directory.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('ml_working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">ml_working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/ml/vsekar@cloudseclab2.com </span>\n        <div id=\"ml_working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is ML working directory.</div>\n        </li></ul>All done!","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["The following functions were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('waitForMLflow').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">waitForMLflow</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\"></span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"waitForMLflow\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">MLflow is an open source platform to manage the ML lifecycle, including experimentation, reproducibility and deployment</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('display_run_uri').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">display_run_uri</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">experiment_id, run_id</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"display_run_uri\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Experiment and run ids</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('plot_confusion_matrix').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">plot_confusion_matrix</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">y_true, y_pred, classes, title=None, cmap=plt.cm.Blues</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"plot_confusion_matrix\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Confusion matrix</div>\n        </li></ul>The following variables were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('username').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">username</span>: <span style=\"font-style:italic; font-weight:bold\">vsekar@cloudseclab2.com </span>\n        <div id=\"username\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('workingDir').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">workingDir</span>: <span style=\"font-style:italic; font-weight:bold\">dbfs:/user/vsekar@cloudseclab2.com/deep_learning/2_exercise_mlflow_pil </span>\n        <div id=\"workingDir\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/user/vsekar@cloudseclab2.com/deep_learning/2_exercise_mlflow_pil </span>\n        <div id=\"working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is working directory.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('ml_working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">ml_working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/ml/vsekar@cloudseclab2.com </span>\n        <div id=\"ml_working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is ML working directory.</div>\n        </li></ul>All done!"]}}],"execution_count":0},{"cell_type":"markdown","source":["### Write Your ML Code Based on the`train_diabetes.py` Code\nThis lab is based on the MLflow's [train_diabetes.py](https://github.com/mlflow/mlflow/blob/master/examples/sklearn_elasticnet_diabetes/osx/train_diabetes.py) example, which uses the `sklearn.diabetes` built-in dataset to predict disease progression based on various factors."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"294aec9a-fe52-4709-a59a-a1ca678eeb2e"}}},{"cell_type":"code","source":["#ANSWER\n# Import various libraries including matplotlib, sklearn, mlflow\nimport os\nimport warnings\nimport sys\n\nimport pandas as pd\nimport numpy as np\nfrom itertools import cycle\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import lasso_path, enet_path\nfrom sklearn import datasets\n\n# Import mlflow\nimport mlflow\nimport mlflow.sklearn\n\n# Load Diabetes datasets\n\ndiabetes = datasets.load_diabetes()\nX = diabetes.data\ny = diabetes.target\n\n# Create pandas DataFrame for sklearn ElasticNet linear_model\nY = np.array([y]).transpose()\nd = np.concatenate((X, Y), axis=1)\ncols = ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6', 'progression']\ndata = pd.DataFrame(d, columns=cols)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"4ef5e905-3722-46f8-b1a1-c5c3764de1bf"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["### Plot the ElasticNet Descent Path\nAs an example of recording arbitrary output files in MLflow, plot the [ElasticNet Descent Path](http://scikit-learn.org/stable/auto_examples/linear_model/plot_lasso_coordinate_descent_path.html) for the ElasticNet model by *alpha* for the specified *l1_ratio*.\n\nThe `plot_enet_descent_path` function below:\n* Returns an image that can be displayed in our Databricks notebook via `display`\n* As well as saves the figure `ElasticNet-paths.png` to the Databricks cluster's driver node\n* Upload the file to MLflow using the `log_artifact` within `train_diabetes`"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"4a1f4ff4-9f4f-4491-ab15-fae03b108672"}}},{"cell_type":"code","source":["def plot_enet_descent_path(X, y, l1_ratio):\n    # Compute paths\n    eps = 5e-3  # the smaller it is the longer is the path\n\n    # Reference the global image variable\n    global image\n    \n    print(\"Computing regularization path using ElasticNet.\")\n    alphas_enet, coefs_enet, _ = enet_path(X, y, eps=eps, l1_ratio=l1_ratio, fit_intercept=False)\n\n    # Display results\n    fig = plt.figure(1)\n    ax = plt.gca()\n\n    colors = cycle(['b', 'r', 'g', 'c', 'k'])\n    neg_log_alphas_enet = -np.log10(alphas_enet)\n    for coef_e, c in zip(coefs_enet, colors):\n        l1 = plt.plot(neg_log_alphas_enet, coef_e, linestyle='--', c=c)\n\n    plt.xlabel('-Log(alpha)')\n    plt.ylabel('coefficients')\n    title = 'ElasticNet Path by alpha for l1_ratio = ' + str(l1_ratio)\n    plt.title(title)\n    plt.axis('tight')\n\n    # Display images\n    image = fig\n    \n    # Save figure\n    fig.savefig(\"ElasticNet-paths.png\")\n\n    # Close plot\n    plt.close(fig)\n\n    # Return images\n    return image    "],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"cc475a75-78e2-47fd-ba82-40f635389794"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["### Train the Diabetes Model\nThe next function trains ElasticNet linear regression based on the input parameters of `alpha (in_alpha)` and `l1_ratio (in_l1_ratio)`.\n\nIn addition, this function uses MLflow Tracking to record its\n* parameters\n* metrics\n* model\n* arbitrary files, namely the above noted Lasso Descent Path plot.\n\n**Tip:** Use `with mlflow.start_run:` in the Python code to create a new MLflow run. This is the recommended way to use MLflow in notebook cells. Whether your code completes or exits with an error, the `with` context will make sure to close the MLflow run, so you don't have to call `mlflow.end_run`."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"c4642753-9e9e-4305-897c-a5b988187ed6"}}},{"cell_type":"code","source":["#ANSWER\n# train_diabetes\n#   Uses the sklearn Diabetes dataset to predict diabetes progression using ElasticNet\n#       The predicted \"progression\" column is a quantitative measure of disease progression one year after baseline\n#       http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html\ndef train_diabetes(data, in_alpha, in_l1_ratio):\n  # Evaluate metrics\n  def eval_metrics(actual, pred):\n      rmse = np.sqrt(mean_squared_error(actual, pred))\n      mae = mean_absolute_error(actual, pred)\n      r2 = r2_score(actual, pred)\n      return rmse, mae, r2\n\n  warnings.filterwarnings(\"ignore\")\n  np.random.seed(40)\n\n  # Split the data into training and test sets. (0.75, 0.25) split.\n  train, test = train_test_split(data)\n\n  # The predicted column is \"progression\" which is a quantitative measure of disease progression one year after baseline\n  train_x = train.drop([\"progression\"], axis=1)\n  test_x = test.drop([\"progression\"], axis=1)\n  train_y = train[[\"progression\"]]\n  test_y = test[[\"progression\"]]\n\n  if float(in_alpha) is None:\n    alpha = 0.05\n  else:\n    alpha = float(in_alpha)\n    \n  if float(in_l1_ratio) is None:\n    l1_ratio = 0.05\n  else:\n    l1_ratio = float(in_l1_ratio)\n  \n  # Start an MLflow run; the \"with\" keyword ensures we'll close the run even if this cell crashes\n  with mlflow.start_run():\n    lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n    lr.fit(train_x, train_y)\n\n    predicted_qualities = lr.predict(test_x)\n\n    (rmse, mae, r2) = eval_metrics(test_y, predicted_qualities)\n\n    # Print out ElasticNet model metrics\n    print(\"Elasticnet model (alpha=%f, l1_ratio=%f):\" % (alpha, l1_ratio))\n    print(\"  RMSE: %s\" % rmse)\n    print(\"  MAE: %s\" % mae)\n    print(\"  R2: %s\" % r2)\n\n    # Set tracking_URI first and then reset it back to not specifying port\n    # Note, we had specified this in an earlier cell\n    #mlflow.set_tracking_uri(mlflow_tracking_URI)\n\n    # Log mlflow attributes for mlflow UI\n    mlflow.log_param(\"alpha\", alpha)\n    mlflow.log_param(\"l1_ratio\", l1_ratio)\n    mlflow.log_metric(\"rmse\", rmse)\n    mlflow.log_metric(\"r2\", r2)\n    mlflow.log_metric(\"mae\", mae)\n    mlflow.sklearn.log_model(lr, \"model\")\n    modelpath = \"/dbfs/mlflow/test_diabetes/model-%f-%f\" % (alpha, l1_ratio)\n    mlflow.sklearn.save_model(lr, modelpath)\n    \n    # Call plot_enet_descent_path\n    image = plot_enet_descent_path(X, y, l1_ratio)\n    \n    # Log artifacts (output files)\n    mlflow.log_artifact(\"ElasticNet-paths.png\")"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"bce7c7df-9e4f-4185-b4f9-af1901a7dafc"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["### Experiment with Different Parameters\n\nCall `train_diabetes` with different parameters. Later, you'll be able to visualize all these runs in the MLflow experiment."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"9bea2927-568d-44d7-89c9-16cc4c70b034"}}},{"cell_type":"code","source":["%fs rm -r dbfs:/mlflow/test_diabetes"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"68ccb466-41f6-41b3-8320-9e6317c005e4"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">res10: Boolean = false\n</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">res10: Boolean = false\n</div>"]}}],"execution_count":0},{"cell_type":"code","source":["# alpha and l1_ratio values of 0.01, 0.01\ntrain_diabetes(data, 0.01, 0.01)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"e079baae-8f97-4699-8581-662fce20de83"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">Elasticnet model (alpha=0.010000, l1_ratio=0.010000):\n  RMSE: 71.40362571026475\n  MAE: 60.09124839565383\n  R2: 0.2291130640003659\n</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Elasticnet model (alpha=0.010000, l1_ratio=0.010000):\n  RMSE: 71.40362571026475\n  MAE: 60.09124839565383\n  R2: 0.2291130640003659\n</div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292109&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      1</span> <span class=\"ansi-red-fg\"># alpha and l1_ratio values of 0.01, 0.01</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span><span class=\"ansi-red-fg\"> </span>train_diabetes<span class=\"ansi-blue-fg\">(</span>data<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-cyan-fg\">0.01</span><span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-cyan-fg\">0.01</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">&lt;command-3013059022292106&gt;</span> in <span class=\"ansi-cyan-fg\">train_diabetes</span><span class=\"ansi-blue-fg\">(data, in_alpha, in_l1_ratio)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     59</span>     mlflow<span class=\"ansi-blue-fg\">.</span>log_metric<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;r2&#34;</span><span class=\"ansi-blue-fg\">,</span> r2<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     60</span>     mlflow<span class=\"ansi-blue-fg\">.</span>log_metric<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;mae&#34;</span><span class=\"ansi-blue-fg\">,</span> mae<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">---&gt; 61</span><span class=\"ansi-red-fg\">     </span>mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>lr<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     62</span>     modelpath <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-blue-fg\">&#34;/dbfs/mlflow/test_diabetes/model-%f-%f&#34;</span> <span class=\"ansi-blue-fg\">%</span> <span class=\"ansi-blue-fg\">(</span>alpha<span class=\"ansi-blue-fg\">,</span> l1_ratio<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     63</span>     mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>lr<span class=\"ansi-blue-fg\">,</span> modelpath<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/sklearn.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(sk_model, artifact_path, conda_env, serialization_format, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    193</span>     <span class=\"ansi-blue-fg\">&gt;&gt;</span><span class=\"ansi-blue-fg\">&gt;</span> mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>sk_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;sk_models&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    194</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 195</span><span class=\"ansi-red-fg\">     return Model.log(artifact_path=artifact_path,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    196</span>                      flavor<span class=\"ansi-blue-fg\">=</span>mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    197</span>                      sk_model<span class=\"ansi-blue-fg\">=</span>sk_model<span class=\"ansi-blue-fg\">,</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/3013059022292098&#39;</div>","errorSummary":"<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/3013059022292098&#39;","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292109&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      1</span> <span class=\"ansi-red-fg\"># alpha and l1_ratio values of 0.01, 0.01</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span><span class=\"ansi-red-fg\"> </span>train_diabetes<span class=\"ansi-blue-fg\">(</span>data<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-cyan-fg\">0.01</span><span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-cyan-fg\">0.01</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">&lt;command-3013059022292106&gt;</span> in <span class=\"ansi-cyan-fg\">train_diabetes</span><span class=\"ansi-blue-fg\">(data, in_alpha, in_l1_ratio)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     59</span>     mlflow<span class=\"ansi-blue-fg\">.</span>log_metric<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;r2&#34;</span><span class=\"ansi-blue-fg\">,</span> r2<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     60</span>     mlflow<span class=\"ansi-blue-fg\">.</span>log_metric<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;mae&#34;</span><span class=\"ansi-blue-fg\">,</span> mae<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">---&gt; 61</span><span class=\"ansi-red-fg\">     </span>mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>lr<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     62</span>     modelpath <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-blue-fg\">&#34;/dbfs/mlflow/test_diabetes/model-%f-%f&#34;</span> <span class=\"ansi-blue-fg\">%</span> <span class=\"ansi-blue-fg\">(</span>alpha<span class=\"ansi-blue-fg\">,</span> l1_ratio<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     63</span>     mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>lr<span class=\"ansi-blue-fg\">,</span> modelpath<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/sklearn.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(sk_model, artifact_path, conda_env, serialization_format, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    193</span>     <span class=\"ansi-blue-fg\">&gt;&gt;</span><span class=\"ansi-blue-fg\">&gt;</span> mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>sk_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;sk_models&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    194</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 195</span><span class=\"ansi-red-fg\">     return Model.log(artifact_path=artifact_path,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    196</span>                      flavor<span class=\"ansi-blue-fg\">=</span>mlflow<span class=\"ansi-blue-fg\">.</span>sklearn<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    197</span>                      sk_model<span class=\"ansi-blue-fg\">=</span>sk_model<span class=\"ansi-blue-fg\">,</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/3013059022292098&#39;</div>"]}}],"execution_count":0},{"cell_type":"code","source":["display(image)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"c54ca66a-101d-4fc2-90fc-b2026bf7ac7e"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"code","source":["# alpha and l1_ratio values of 0.01, 0.75\ntrain_diabetes(data, 0.01, 0.75)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"7dc7e6c0-591e-4de6-8ab6-c8bf0c94f03e"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"code","source":["display(image)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"43184830-9922-4c76-aad9-c32ccdb03513"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"code","source":["# alpha and l1_ratio values of 0.01, .5\ntrain_diabetes(data, 0.01, .5)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"2231d4b3-2540-4865-9581-fd6429cf55fd"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"code","source":["display(image)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"aa9e6f16-848b-4b66-a146-f92fcdc55175"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"code","source":["# alpha and l1_ratio values of 0.01, 1\ntrain_diabetes(data, 0.01, 1)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"2ef0bbf0-23e4-4531-b3d8-f20b1527778c"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"code","source":["display(image)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"ba678d64-61c5-49d8-82e9-2c191e55404a"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"Command skipped","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0},{"cell_type":"markdown","source":["### View the run, experiment, run details, and notebook revision\n\n1. Click the **Runs** icon in the notebook context bar to display the Runs sidebar. In the sidebar, you can view the run parameters and metrics. For example: <img src=\"https://docs.databricks.com/_static/images/mlflow/mlflow-notebook-experiments.gif\"/>\n   \n1. Click the External Link icon <img src=\"https://docs.databricks.com/_static/images/external-link.png\"/> in the Runs context bar to view the notebook experiment. For example: <img src=\"https://docs.databricks.com/_static/images/mlflow/quick-start-nb-experiment.png\"/>"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"538449d6-dc97-4184-8f54-534b27e351a8"}}}],"metadata":{"application/vnd.databricks.v1+notebook":{"notebookName":"2. Exercise MLflow","dashboards":[],"notebookMetadata":{"pythonIndentUnit":2},"language":"python","widgets":{},"notebookOrigID":3013059022292098}},"nbformat":4,"nbformat_minor":0}
