{"cells":[{"cell_type":"markdown","source":["# MLflow\n\n[MLflow](https://mlflow.org/docs/latest/concepts.html) seeks to address these three core issues:\n\n* It’s difficult to keep track of experiments\n* It’s difficult to reproduce code\n* There’s no standard way to package and deploy models\n\nIn the past, when examining a problem, you would have to manually keep track of the many models you created, as well as their associated parameters and metrics. This can quickly become tedious and take up valuable time, which is where MLflow comes in.\n\n## ![Spark Logo Tiny](https://files.training.databricks.com/images/105/logo_spark_tiny.png) In this lesson you:<br>\n* Use MLflow to track experiments, log metrics, and compare runs\n\n**Required Libraries**: \n* `mlflow==1.7.0` via PyPI"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"daa7757f-a6c0-434b-9065-1d92069e5020"}}},{"cell_type":"markdown","source":["-sandbox\n<div><img src=\"https://files.training.databricks.com/images/eLearning/ML-Part-4/mlflow-tracking.png\" style=\"height: 400px; margin: 20px\"/></div>"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"46ad9f57-7856-4c39-8216-2dbe665594dc"}}},{"cell_type":"code","source":["%run \"./Includes/Classroom-Setup\""],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"b552035b-6670-4dce-8280-9e6318d6dbd4"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the learning environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the learning environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Scala environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Scala environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Scala environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Scala environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Python environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Python environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Preparing the Python environment...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Preparing the Python environment..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining courseware-specific utility methods...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining courseware-specific utility methods..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining courseware-specific utility methods...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining courseware-specific utility methods..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining user-facing utility methods...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining user-facing utility methods..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining custom variables for this lesson...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining custom variables for this lesson..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Defining custom variables for this lesson...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Defining custom variables for this lesson..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's testing framework...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's testing framework..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's testing framework...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's testing framework..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's services for generating dynamic data...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's services for generating dynamic data..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Initializing Databricks Academy's services for generating dynamic data...","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Initializing Databricks Academy's services for generating dynamic data..."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Mounting course-specific datasets to <b>/mnt/training</b>...</br>Datasets are already mounted to <b>/mnt/training</b> from <b>wasbs://training@dbtraineastus.blob.core.windows.net/</b>","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Mounting course-specific datasets to <b>/mnt/training</b>...</br>Datasets are already mounted to <b>/mnt/training</b> from <b>wasbs://training@dbtraineastus.blob.core.windows.net/</b>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Cleaning up the learning environment...no actions taken.","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Cleaning up the learning environment...no actions taken."]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"Cleaning up the learning environment...<ul><li>Removed working directory: <b>dbfs:/user/vsekar@cloudseclab2.com/deep_learning/1_mlflow_pil</b></li></ul>","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["Cleaning up the learning environment...<ul><li>Removed working directory: <b>dbfs:/user/vsekar@cloudseclab2.com/deep_learning/1_mlflow_pil</b></li></ul>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"\n    ","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["\n    "]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"\n    ","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["\n    "]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"The following functions were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('waitForMLflow').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">waitForMLflow</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\"></span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"waitForMLflow\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">MLflow is an open source platform to manage the ML lifecycle, including experimentation, reproducibility and deployment</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('display_run_uri').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">display_run_uri</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">experiment_id, run_id</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"display_run_uri\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Experiment and run ids</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('plot_confusion_matrix').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">plot_confusion_matrix</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">y_true, y_pred, classes, title=None, cmap=plt.cm.Blues</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"plot_confusion_matrix\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Confusion matrix</div>\n        </li></ul>The following variables were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('username').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">username</span>: <span style=\"font-style:italic; font-weight:bold\">vsekar@cloudseclab2.com </span>\n        <div id=\"username\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('workingDir').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">workingDir</span>: <span style=\"font-style:italic; font-weight:bold\">dbfs:/user/vsekar@cloudseclab2.com/deep_learning/1_mlflow_pil </span>\n        <div id=\"workingDir\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/user/vsekar@cloudseclab2.com/deep_learning/1_mlflow_pil </span>\n        <div id=\"working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is working directory.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('ml_working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">ml_working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/ml/vsekar@cloudseclab2.com </span>\n        <div id=\"ml_working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is ML working directory.</div>\n        </li></ul>All done!","textData":null,"removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"htmlSandbox","arguments":{}}},"output_type":"display_data","data":{"text/html":["The following functions were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('waitForMLflow').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">waitForMLflow</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\"></span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"waitForMLflow\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">MLflow is an open source platform to manage the ML lifecycle, including experimentation, reproducibility and deployment</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('display_run_uri').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">display_run_uri</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">experiment_id, run_id</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"display_run_uri\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Experiment and run ids</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('plot_confusion_matrix').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">plot_confusion_matrix</span>\n        <span style=\"font-weight:bold\">(</span>\n        <span style=\"color: green; font-weight:bold; font-style:italic\">y_true, y_pred, classes, title=None, cmap=plt.cm.Blues</span>\n        <span style=\"font-weight:bold\">)</span>\n        <div id=\"plot_confusion_matrix\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">Confusion matrix</div>\n        </li></ul>The following variables were defined for you:<ul style='margin-top:0'><li style=\"cursor:help\" onclick=\"document.getElementById('username').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">username</span>: <span style=\"font-style:italic; font-weight:bold\">vsekar@cloudseclab2.com </span>\n        <div id=\"username\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('workingDir').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">workingDir</span>: <span style=\"font-style:italic; font-weight:bold\">dbfs:/user/vsekar@cloudseclab2.com/deep_learning/1_mlflow_pil </span>\n        <div id=\"workingDir\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">No additional information was provided.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/user/vsekar@cloudseclab2.com/deep_learning/1_mlflow_pil </span>\n        <div id=\"working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is working directory.</div>\n        </li><li style=\"cursor:help\" onclick=\"document.getElementById('ml_working_path').style.display='block'\">\n        <span style=\"color: green; font-weight:bold\">ml_working_path</span>: <span style=\"font-style:italic; font-weight:bold\">/dbfs/ml/vsekar@cloudseclab2.com </span>\n        <div id=\"ml_working_path\" style=\"display:none; margin:0.5em 0; border-left: 3px solid grey; padding-left: 0.5em\">This is ML working directory.</div>\n        </li></ul>All done!"]}}],"execution_count":0},{"cell_type":"markdown","source":["Let's start by loading SF Airbnb Dataset."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"69185f77-983d-4114-acf2-529b2060f7c8"}}},{"cell_type":"code","source":["%python\nfilePath = \"dbfs:/mnt/training/airbnb/sf-listings/sf-listings-2019-03-06-clean.parquet/\"\nairbnbDF = spark.read.parquet(filePath)\n\n(trainDF, testDF) = airbnbDF.randomSplit([.8, .2], seed=42)\nprint(trainDF.cache().count())"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"6cbe240b-231a-4f04-b854-61ebaf567cf9"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">5780\n</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">5780\n</div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["### MLflow Tracking\n\nMLflow Tracking is a logging API specific for machine learning and agnostic to libraries and environments that do the training.  It is organized around the concept of **runs**, which are executions of data science code.  Runs are aggregated into **experiments** where many runs can be a part of a given experiment and an MLflow server can host many experiments.\n\n\nMLflow tracking also serves as a **model registry** so tracked models can easily be stored and, as necessary, deployed into production. This also standardizes this process, which significantly accelerates it and allows for scalability. Experiments can be tracked using libraries in Python, R, and Java as well as by using the CLI and REST calls.  This module will use Python, though the majority of MLflow functionality is also exposed in these other APIs."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"ade0b6e0-2ce9-44e2-9276-105bcf5881e7"}}},{"cell_type":"markdown","source":["### Track Runs\n\nEach run can record the following information:<br><br>\n\n- **Parameters:** Key-value pairs of input parameters such as the number of trees in a random forest model\n- **Metrics:** Evaluation metrics such as RMSE or Area Under the ROC Curve\n- **Artifacts:** Arbitrary output files in any format.  This can include images, pickled models, and data files\n- **Source:** The code that originally ran the experiment\n\n**NOTE**: MLflow can only log PipelineModels."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"6147f125-1fa1-4928-b9f9-378d01f107de"}}},{"cell_type":"code","source":["%python\nimport mlflow\nimport mlflow.spark\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nmlflow.set_experiment(f\"/Users/{username}/tr-mlflow\")\n\nwith mlflow.start_run(run_name=\"LR-Single-Feature\") as run:\n  # Define pipeline\n  vecAssembler = VectorAssembler(inputCols=[\"bedrooms\"], outputCol=\"features\")\n  lr = LinearRegression(featuresCol=\"features\", labelCol=\"price\")\n  pipeline = Pipeline(stages=[vecAssembler, lr])\n  pipelineModel = pipeline.fit(trainDF)\n  \n  # Log parameters\n  mlflow.log_param(\"label\", \"price-bedrooms\")\n  \n  # Log model\n  mlflow.spark.log_model(pipelineModel, \"model\")\n  \n  # Evaluate predictions\n  predDF = pipelineModel.transform(testDF)\n  regressionEvaluator = RegressionEvaluator(predictionCol=\"prediction\", labelCol=\"price\", metricName=\"rmse\")\n  rmse = regressionEvaluator.evaluate(predDF)\n  \n  # Log metrics\n  mlflow.log_metric(\"rmse\", rmse)\n\n# display_run_uri(run.info.experiment_id, run.info.run_id)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"7d4c88e7-b9be-448e-b389-e5d0058ffdad"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">INFO: &#39;/Users/vsekar@cloudseclab2.com/tr-mlflow&#39; does not exist. Creating a new experiment\n</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">INFO: &#39;/Users/vsekar@cloudseclab2.com/tr-mlflow&#39; does not exist. Creating a new experiment\n</div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    157</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 158</span><span class=\"ansi-red-fg\">         </span>spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    309</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Save this ML instance to the given path, a shortcut of &#39;write().save(path)&#39;.&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">--&gt; 310</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>write<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    311</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    260</span>             <span class=\"ansi-green-fg\">raise</span> TypeError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;path should be a string, got type %s&#34;</span> <span class=\"ansi-blue-fg\">%</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_jwrite<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    262</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span>             <span class=\"ansi-green-fg\">if</span> answer<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-cyan-fg\">1</span><span class=\"ansi-blue-fg\">]</span> <span class=\"ansi-blue-fg\">==</span> REFERENCE_TYPE<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 326</span><span class=\"ansi-red-fg\">                 raise Py4JJavaError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    327</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}.\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n\n<span class=\"ansi-red-fg\">Py4JJavaError</span>: An error occurred while calling o931.save.\n: com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/15d480e27076453695920bba27b14152/artifacts/model/sparkml for resolving path &#39;/2410754799131159/15d480e27076453695920bba27b14152/artifacts/model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.\n\tat com.databricks.backend.daemon.data.common.InvalidMountException$.apply(DataMessages.scala:625)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:84)\n\tat com.databricks.backend.daemon.data.client.DBFSV2.resolve(DatabricksFileSystemV2.scala:81)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$2(DatabricksFileSystemV2.scala:762)\n\tat com.databricks.s3a.S3AExceptionUtils$.convertAWSExceptionToJavaIOException(DatabricksStreamUtils.scala:66)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$1(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionContext(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionTags(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.recordOperation(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.getFileStatus(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystem.getFileStatus(DatabricksFileSystem.scala:201)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:675)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:167)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.super$save(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$4(Pipeline.scala:344)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent(events.scala:175)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent$(events.scala:170)\n\tat org.apache.spark.ml.util.Instrumentation.withSaveInstanceEvent(Instrumentation.scala:43)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3$adapted(Pipeline.scala:344)\n\tat org.apache.spark.ml.util.Instrumentation$.$anonfun$instrumented$1(Instrumentation.scala:284)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:284)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.save(Pipeline.scala:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: No FileSystem for scheme: unsupported-access-mechanism-for-path--use-mlflow-client\n\tat org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2660)\n\tat org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2667)\n\tat org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)\n\tat org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)\n\tat org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2Factory.createFileSystem(DatabricksFileSystemV2Factory.scala:98)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.$anonfun$resolve$1(MountEntryResolver.scala:67)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionContext(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionTags(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.common.util.locks.LoggedLock$.recordOperation(LoggedLock.scala:73)\n\tat com.databricks.common.util.locks.LoggedLock$.withLock(LoggedLock.scala:120)\n\tat com.databricks.common.util.locks.PerKeyLock.withLock(PerKeyLock.scala:36)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:64)\n\t... 43 more\n\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292078&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     19</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     20</span>   <span class=\"ansi-red-fg\"># Log model</span>\n<span class=\"ansi-green-fg\">---&gt; 21</span><span class=\"ansi-red-fg\">   </span>mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>pipelineModel<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     22</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     23</span>   <span class=\"ansi-red-fg\"># Evaluate predictions</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    158</span>         spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 160</span><span class=\"ansi-red-fg\">         return Model.log(artifact_path=artifact_path, flavor=mlflow.spark, spark_model=spark_model,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    161</span>                          conda_env<span class=\"ansi-blue-fg\">=</span>conda_env<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">,</span> sample_input<span class=\"ansi-blue-fg\">=</span>sample_input<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    162</span>                          registered_model_name=registered_model_name)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159&#39;</div>","errorSummary":"com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/15d480e27076453695920bba27b14152/artifacts/model/sparkml for resolving path &#39;/2410754799131159/15d480e27076453695920bba27b14152/artifacts/model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    157</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 158</span><span class=\"ansi-red-fg\">         </span>spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    309</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Save this ML instance to the given path, a shortcut of &#39;write().save(path)&#39;.&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">--&gt; 310</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>write<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    311</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    260</span>             <span class=\"ansi-green-fg\">raise</span> TypeError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;path should be a string, got type %s&#34;</span> <span class=\"ansi-blue-fg\">%</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_jwrite<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    262</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span>             <span class=\"ansi-green-fg\">if</span> answer<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-cyan-fg\">1</span><span class=\"ansi-blue-fg\">]</span> <span class=\"ansi-blue-fg\">==</span> REFERENCE_TYPE<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 326</span><span class=\"ansi-red-fg\">                 raise Py4JJavaError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    327</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}.\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n\n<span class=\"ansi-red-fg\">Py4JJavaError</span>: An error occurred while calling o931.save.\n: com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/15d480e27076453695920bba27b14152/artifacts/model/sparkml for resolving path &#39;/2410754799131159/15d480e27076453695920bba27b14152/artifacts/model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.\n\tat com.databricks.backend.daemon.data.common.InvalidMountException$.apply(DataMessages.scala:625)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:84)\n\tat com.databricks.backend.daemon.data.client.DBFSV2.resolve(DatabricksFileSystemV2.scala:81)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$2(DatabricksFileSystemV2.scala:762)\n\tat com.databricks.s3a.S3AExceptionUtils$.convertAWSExceptionToJavaIOException(DatabricksStreamUtils.scala:66)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$1(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionContext(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionTags(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.recordOperation(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.getFileStatus(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystem.getFileStatus(DatabricksFileSystem.scala:201)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:675)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:167)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.super$save(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$4(Pipeline.scala:344)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent(events.scala:175)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent$(events.scala:170)\n\tat org.apache.spark.ml.util.Instrumentation.withSaveInstanceEvent(Instrumentation.scala:43)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3$adapted(Pipeline.scala:344)\n\tat org.apache.spark.ml.util.Instrumentation$.$anonfun$instrumented$1(Instrumentation.scala:284)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:284)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.save(Pipeline.scala:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: No FileSystem for scheme: unsupported-access-mechanism-for-path--use-mlflow-client\n\tat org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2660)\n\tat org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2667)\n\tat org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)\n\tat org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)\n\tat org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2Factory.createFileSystem(DatabricksFileSystemV2Factory.scala:98)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.$anonfun$resolve$1(MountEntryResolver.scala:67)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionContext(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionTags(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.common.util.locks.LoggedLock$.recordOperation(LoggedLock.scala:73)\n\tat com.databricks.common.util.locks.LoggedLock$.withLock(LoggedLock.scala:120)\n\tat com.databricks.common.util.locks.PerKeyLock.withLock(PerKeyLock.scala:36)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:64)\n\t... 43 more\n\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292078&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     19</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     20</span>   <span class=\"ansi-red-fg\"># Log model</span>\n<span class=\"ansi-green-fg\">---&gt; 21</span><span class=\"ansi-red-fg\">   </span>mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>pipelineModel<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     22</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     23</span>   <span class=\"ansi-red-fg\"># Evaluate predictions</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    158</span>         spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 160</span><span class=\"ansi-red-fg\">         return Model.log(artifact_path=artifact_path, flavor=mlflow.spark, spark_model=spark_model,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    161</span>                          conda_env<span class=\"ansi-blue-fg\">=</span>conda_env<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">,</span> sample_input<span class=\"ansi-blue-fg\">=</span>sample_input<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    162</span>                          registered_model_name=registered_model_name)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159&#39;</div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["Next let's build our linear regression model but use all of our features."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"c0792342-0e3f-4c41-bb5f-24dbf29af0a2"}}},{"cell_type":"code","source":["%python\nfrom pyspark.ml.feature import RFormula\nwith mlflow.start_run(run_name=\"LR-All-Features\") as run:\n  # Create pipeline\n  rFormula = RFormula(formula=\"price ~ .\", featuresCol=\"features\", labelCol=\"price\", handleInvalid=\"skip\")\n  lr = LinearRegression(labelCol=\"price\", featuresCol=\"features\")\n  pipeline = Pipeline(stages = [rFormula, lr])\n  pipelineModel = pipeline.fit(trainDF)\n  \n  # Log pipeline\n  mlflow.spark.log_model(pipelineModel, \"model\")\n  \n  # Log parameter\n  mlflow.log_param(\"label\", \"price-all-features\")\n  \n  # Create predictions and metrics\n  predDF = pipelineModel.transform(testDF)\n  regressionEvaluator = RegressionEvaluator(labelCol=\"price\", predictionCol=\"prediction\")\n  rmse = regressionEvaluator.setMetricName(\"rmse\").evaluate(predDF)\n  r2 = regressionEvaluator.setMetricName(\"r2\").evaluate(predDF)\n  \n  # Log both metrics\n  mlflow.log_metric(\"rmse\", rmse)\n  mlflow.log_metric(\"r2\", r2)\n\n# display_run_uri(run.info.experiment_id, run.info.run_id)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"55085005-7a05-4486-80fe-1d10c2481f79"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    157</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 158</span><span class=\"ansi-red-fg\">         </span>spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    309</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Save this ML instance to the given path, a shortcut of &#39;write().save(path)&#39;.&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">--&gt; 310</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>write<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    311</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    260</span>             <span class=\"ansi-green-fg\">raise</span> TypeError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;path should be a string, got type %s&#34;</span> <span class=\"ansi-blue-fg\">%</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_jwrite<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    262</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span>             <span class=\"ansi-green-fg\">if</span> answer<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-cyan-fg\">1</span><span class=\"ansi-blue-fg\">]</span> <span class=\"ansi-blue-fg\">==</span> REFERENCE_TYPE<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 326</span><span class=\"ansi-red-fg\">                 raise Py4JJavaError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    327</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}.\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n\n<span class=\"ansi-red-fg\">Py4JJavaError</span>: An error occurred while calling o1263.save.\n: com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts/model/sparkml for resolving path &#39;/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts/model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.\n\tat com.databricks.backend.daemon.data.common.InvalidMountException$.apply(DataMessages.scala:625)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:84)\n\tat com.databricks.backend.daemon.data.client.DBFSV2.resolve(DatabricksFileSystemV2.scala:81)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$2(DatabricksFileSystemV2.scala:762)\n\tat com.databricks.s3a.S3AExceptionUtils$.convertAWSExceptionToJavaIOException(DatabricksStreamUtils.scala:66)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$1(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionContext(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionTags(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.recordOperation(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.getFileStatus(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystem.getFileStatus(DatabricksFileSystem.scala:201)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:675)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:167)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.super$save(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$4(Pipeline.scala:344)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent(events.scala:175)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent$(events.scala:170)\n\tat org.apache.spark.ml.util.Instrumentation.withSaveInstanceEvent(Instrumentation.scala:43)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3$adapted(Pipeline.scala:344)\n\tat org.apache.spark.ml.util.Instrumentation$.$anonfun$instrumented$1(Instrumentation.scala:284)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:284)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.save(Pipeline.scala:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: No FileSystem for scheme: unsupported-access-mechanism-for-path--use-mlflow-client\n\tat org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2660)\n\tat org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2667)\n\tat org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)\n\tat org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)\n\tat org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2Factory.createFileSystem(DatabricksFileSystemV2Factory.scala:98)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.$anonfun$resolve$1(MountEntryResolver.scala:67)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionContext(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionTags(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.common.util.locks.LoggedLock$.recordOperation(LoggedLock.scala:73)\n\tat com.databricks.common.util.locks.LoggedLock$.withLock(LoggedLock.scala:120)\n\tat com.databricks.common.util.locks.PerKeyLock.withLock(PerKeyLock.scala:36)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:64)\n\t... 43 more\n\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292080&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      8</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">      9</span>   <span class=\"ansi-red-fg\"># Log pipeline</span>\n<span class=\"ansi-green-fg\">---&gt; 10</span><span class=\"ansi-red-fg\">   </span>mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>pipelineModel<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     11</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     12</span>   <span class=\"ansi-red-fg\"># Log parameter</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    158</span>         spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 160</span><span class=\"ansi-red-fg\">         return Model.log(artifact_path=artifact_path, flavor=mlflow.spark, spark_model=spark_model,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    161</span>                          conda_env<span class=\"ansi-blue-fg\">=</span>conda_env<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">,</span> sample_input<span class=\"ansi-blue-fg\">=</span>sample_input<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    162</span>                          registered_model_name=registered_model_name)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159&#39;</div>","errorSummary":"com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts/model/sparkml for resolving path &#39;/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts/model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    157</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 158</span><span class=\"ansi-red-fg\">         </span>spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    309</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Save this ML instance to the given path, a shortcut of &#39;write().save(path)&#39;.&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">--&gt; 310</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>write<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    311</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    260</span>             <span class=\"ansi-green-fg\">raise</span> TypeError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;path should be a string, got type %s&#34;</span> <span class=\"ansi-blue-fg\">%</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_jwrite<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    262</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span>             <span class=\"ansi-green-fg\">if</span> answer<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-cyan-fg\">1</span><span class=\"ansi-blue-fg\">]</span> <span class=\"ansi-blue-fg\">==</span> REFERENCE_TYPE<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 326</span><span class=\"ansi-red-fg\">                 raise Py4JJavaError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    327</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}.\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n\n<span class=\"ansi-red-fg\">Py4JJavaError</span>: An error occurred while calling o1263.save.\n: com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts/model/sparkml for resolving path &#39;/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts/model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.\n\tat com.databricks.backend.daemon.data.common.InvalidMountException$.apply(DataMessages.scala:625)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:84)\n\tat com.databricks.backend.daemon.data.client.DBFSV2.resolve(DatabricksFileSystemV2.scala:81)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$2(DatabricksFileSystemV2.scala:762)\n\tat com.databricks.s3a.S3AExceptionUtils$.convertAWSExceptionToJavaIOException(DatabricksStreamUtils.scala:66)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$1(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionContext(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionTags(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.recordOperation(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.getFileStatus(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystem.getFileStatus(DatabricksFileSystem.scala:201)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:675)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:167)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.super$save(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$4(Pipeline.scala:344)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent(events.scala:175)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent$(events.scala:170)\n\tat org.apache.spark.ml.util.Instrumentation.withSaveInstanceEvent(Instrumentation.scala:43)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3$adapted(Pipeline.scala:344)\n\tat org.apache.spark.ml.util.Instrumentation$.$anonfun$instrumented$1(Instrumentation.scala:284)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:284)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.save(Pipeline.scala:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: No FileSystem for scheme: unsupported-access-mechanism-for-path--use-mlflow-client\n\tat org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2660)\n\tat org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2667)\n\tat org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)\n\tat org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)\n\tat org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2Factory.createFileSystem(DatabricksFileSystemV2Factory.scala:98)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.$anonfun$resolve$1(MountEntryResolver.scala:67)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionContext(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionTags(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.common.util.locks.LoggedLock$.recordOperation(LoggedLock.scala:73)\n\tat com.databricks.common.util.locks.LoggedLock$.withLock(LoggedLock.scala:120)\n\tat com.databricks.common.util.locks.PerKeyLock.withLock(PerKeyLock.scala:36)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:64)\n\t... 43 more\n\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292080&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      8</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">      9</span>   <span class=\"ansi-red-fg\"># Log pipeline</span>\n<span class=\"ansi-green-fg\">---&gt; 10</span><span class=\"ansi-red-fg\">   </span>mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>pipelineModel<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     11</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     12</span>   <span class=\"ansi-red-fg\"># Log parameter</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    158</span>         spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 160</span><span class=\"ansi-red-fg\">         return Model.log(artifact_path=artifact_path, flavor=mlflow.spark, spark_model=spark_model,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    161</span>                          conda_env<span class=\"ansi-blue-fg\">=</span>conda_env<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">,</span> sample_input<span class=\"ansi-blue-fg\">=</span>sample_input<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    162</span>                          registered_model_name=registered_model_name)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159&#39;</div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["Finally, we will use Linear Regression to predict the log of the price, due to its log normal distribution.\n\nWe'll also practice logging artifacts to keep a visual of our log normal histogram."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"13c41ad7-5678-4fc8-bba7-4e111315372a"}}},{"cell_type":"code","source":["%python\nfrom pyspark.ml.feature import RFormula\nfrom pyspark.sql.functions import col, log, exp\nimport matplotlib.pyplot as plt\n\nwith mlflow.start_run(run_name=\"LR-Log-Price\") as run:\n  # Take log of price\n  logTrainDF = trainDF.withColumn(\"log_price\", log(col(\"price\")))\n  logTestDF = testDF.withColumn(\"log_price\", log(col(\"price\")))\n  \n  # Log parameter\n  mlflow.log_param(\"label\", \"log-price\")\n  \n  # Create pipeline\n  rFormula = RFormula(formula=\"log_price ~ . - price\", featuresCol=\"features\", labelCol=\"log_price\", handleInvalid=\"skip\")  \n  lr = LinearRegression(labelCol=\"log_price\", predictionCol=\"log_prediction\")\n  pipeline = Pipeline(stages = [rFormula, lr])\n  pipelineModel = pipeline.fit(logTrainDF)\n  \n  # Log model\n  mlflow.spark.log_model(pipelineModel, \"log-model\")\n  \n  # Make predictions\n  predDF = pipelineModel.transform(logTestDF)\n  expDF = predDF.withColumn(\"prediction\", exp(col(\"log_prediction\")))\n  \n  # Evaluate predictions\n  rmse = regressionEvaluator.setMetricName(\"rmse\").evaluate(expDF)\n  r2 = regressionEvaluator.setMetricName(\"r2\").evaluate(expDF)\n  \n  # Log metrics\n  mlflow.log_metric(\"rmse\", rmse)\n  mlflow.log_metric(\"r2\", r2)\n  \n  # Log artifact\n  plt.clf()\n  logTrainDF.toPandas().hist(column=\"log_price\", bins=100)\n  figPath = username + \"logNormal.png\" \n  plt.savefig(figPath)\n  mlflow.log_artifact(figPath)\n  display(plt.show())\n  \n# display_run_uri(run.info.experiment_id, run.info.run_id)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"1848b143-f7ac-4188-a082-f8b7dacdc9b8"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    157</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 158</span><span class=\"ansi-red-fg\">         </span>spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    309</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Save this ML instance to the given path, a shortcut of &#39;write().save(path)&#39;.&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">--&gt; 310</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>write<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    311</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    260</span>             <span class=\"ansi-green-fg\">raise</span> TypeError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;path should be a string, got type %s&#34;</span> <span class=\"ansi-blue-fg\">%</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_jwrite<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    262</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span>             <span class=\"ansi-green-fg\">if</span> answer<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-cyan-fg\">1</span><span class=\"ansi-blue-fg\">]</span> <span class=\"ansi-blue-fg\">==</span> REFERENCE_TYPE<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 326</span><span class=\"ansi-red-fg\">                 raise Py4JJavaError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    327</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}.\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n\n<span class=\"ansi-red-fg\">Py4JJavaError</span>: An error occurred while calling o1655.save.\n: com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/sparkml for resolving path &#39;/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.\n\tat com.databricks.backend.daemon.data.common.InvalidMountException$.apply(DataMessages.scala:625)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:84)\n\tat com.databricks.backend.daemon.data.client.DBFSV2.resolve(DatabricksFileSystemV2.scala:81)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$2(DatabricksFileSystemV2.scala:762)\n\tat com.databricks.s3a.S3AExceptionUtils$.convertAWSExceptionToJavaIOException(DatabricksStreamUtils.scala:66)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$1(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionContext(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionTags(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.recordOperation(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.getFileStatus(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystem.getFileStatus(DatabricksFileSystem.scala:201)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:675)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:167)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.super$save(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$4(Pipeline.scala:344)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent(events.scala:175)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent$(events.scala:170)\n\tat org.apache.spark.ml.util.Instrumentation.withSaveInstanceEvent(Instrumentation.scala:43)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3$adapted(Pipeline.scala:344)\n\tat org.apache.spark.ml.util.Instrumentation$.$anonfun$instrumented$1(Instrumentation.scala:284)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:284)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.save(Pipeline.scala:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: No FileSystem for scheme: unsupported-access-mechanism-for-path--use-mlflow-client\n\tat org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2660)\n\tat org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2667)\n\tat org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)\n\tat org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)\n\tat org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2Factory.createFileSystem(DatabricksFileSystemV2Factory.scala:98)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.$anonfun$resolve$1(MountEntryResolver.scala:67)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionContext(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionTags(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.common.util.locks.LoggedLock$.recordOperation(LoggedLock.scala:73)\n\tat com.databricks.common.util.locks.LoggedLock$.withLock(LoggedLock.scala:120)\n\tat com.databricks.common.util.locks.PerKeyLock.withLock(PerKeyLock.scala:36)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:64)\n\t... 43 more\n\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292082&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     18</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     19</span>   <span class=\"ansi-red-fg\"># Log model</span>\n<span class=\"ansi-green-fg\">---&gt; 20</span><span class=\"ansi-red-fg\">   </span>mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>pipelineModel<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;log-model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     21</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     22</span>   <span class=\"ansi-red-fg\"># Make predictions</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    158</span>         spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 160</span><span class=\"ansi-red-fg\">         return Model.log(artifact_path=artifact_path, flavor=mlflow.spark, spark_model=spark_model,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    161</span>                          conda_env<span class=\"ansi-blue-fg\">=</span>conda_env<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">,</span> sample_input<span class=\"ansi-blue-fg\">=</span>sample_input<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    162</span>                          registered_model_name=registered_model_name)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159&#39;</div>","errorSummary":"com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/sparkml for resolving path &#39;/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    157</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 158</span><span class=\"ansi-red-fg\">         </span>spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    309</span>         <span class=\"ansi-blue-fg\">&#34;&#34;&#34;Save this ML instance to the given path, a shortcut of &#39;write().save(path)&#39;.&#34;&#34;&#34;</span>\n<span class=\"ansi-green-fg\">--&gt; 310</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>write<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    311</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/ml/util.py</span> in <span class=\"ansi-cyan-fg\">save</span><span class=\"ansi-blue-fg\">(self, path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    260</span>             <span class=\"ansi-green-fg\">raise</span> TypeError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;path should be a string, got type %s&#34;</span> <span class=\"ansi-blue-fg\">%</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 261</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_jwrite<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    262</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    116</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 117</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> f<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">*</span>a<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kw<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    118</span>         <span class=\"ansi-green-fg\">except</span> py4j<span class=\"ansi-blue-fg\">.</span>protocol<span class=\"ansi-blue-fg\">.</span>Py4JJavaError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9-src.zip/py4j/protocol.py</span> in <span class=\"ansi-cyan-fg\">get_return_value</span><span class=\"ansi-blue-fg\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span>             <span class=\"ansi-green-fg\">if</span> answer<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-cyan-fg\">1</span><span class=\"ansi-blue-fg\">]</span> <span class=\"ansi-blue-fg\">==</span> REFERENCE_TYPE<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 326</span><span class=\"ansi-red-fg\">                 raise Py4JJavaError(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    327</span>                     <span class=\"ansi-blue-fg\">&#34;An error occurred while calling {0}{1}{2}.\\n&#34;</span><span class=\"ansi-blue-fg\">.</span>\n\n<span class=\"ansi-red-fg\">Py4JJavaError</span>: An error occurred while calling o1655.save.\n: com.databricks.backend.daemon.data.common.InvalidMountException: Error while using path /databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/sparkml for resolving path &#39;/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/sparkml&#39; within mount at &#39;/databricks/mlflow-tracking&#39;.\n\tat com.databricks.backend.daemon.data.common.InvalidMountException$.apply(DataMessages.scala:625)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:84)\n\tat com.databricks.backend.daemon.data.client.DBFSV2.resolve(DatabricksFileSystemV2.scala:81)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$2(DatabricksFileSystemV2.scala:762)\n\tat com.databricks.s3a.S3AExceptionUtils$.convertAWSExceptionToJavaIOException(DatabricksStreamUtils.scala:66)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.$anonfun$getFileStatus$1(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionContext(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.withAttributionTags(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.recordOperation(DatabricksFileSystemV2.scala:455)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2.getFileStatus(DatabricksFileSystemV2.scala:761)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystem.getFileStatus(DatabricksFileSystem.scala:201)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:675)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:167)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.super$save(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$4(Pipeline.scala:344)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent(events.scala:175)\n\tat org.apache.spark.ml.MLEvents.withSaveInstanceEvent$(events.scala:170)\n\tat org.apache.spark.ml.util.Instrumentation.withSaveInstanceEvent(Instrumentation.scala:43)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3(Pipeline.scala:344)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.$anonfun$save$3$adapted(Pipeline.scala:344)\n\tat org.apache.spark.ml.util.Instrumentation$.$anonfun$instrumented$1(Instrumentation.scala:284)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat org.apache.spark.ml.util.Instrumentation$.instrumented(Instrumentation.scala:284)\n\tat org.apache.spark.ml.PipelineModel$PipelineModelWriter.save(Pipeline.scala:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: No FileSystem for scheme: unsupported-access-mechanism-for-path--use-mlflow-client\n\tat org.apache.hadoop.fs.FileSystem.getFileSystemClass(FileSystem.java:2660)\n\tat org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2667)\n\tat org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:94)\n\tat org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2703)\n\tat org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2685)\n\tat org.apache.hadoop.fs.FileSystem.get(FileSystem.java:373)\n\tat com.databricks.backend.daemon.data.client.DatabricksFileSystemV2Factory.createFileSystem(DatabricksFileSystemV2Factory.scala:98)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.$anonfun$resolve$1(MountEntryResolver.scala:67)\n\tat com.databricks.logging.UsageLogging.$anonfun$recordOperation$4(UsageLogging.scala:434)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:240)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:235)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:232)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionContext(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:279)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:271)\n\tat com.databricks.common.util.locks.LoggedLock$.withAttributionTags(LoggedLock.scala:73)\n\tat com.databricks.logging.UsageLogging.recordOperation(UsageLogging.scala:415)\n\tat com.databricks.logging.UsageLogging.recordOperation$(UsageLogging.scala:341)\n\tat com.databricks.common.util.locks.LoggedLock$.recordOperation(LoggedLock.scala:73)\n\tat com.databricks.common.util.locks.LoggedLock$.withLock(LoggedLock.scala:120)\n\tat com.databricks.common.util.locks.PerKeyLock.withLock(PerKeyLock.scala:36)\n\tat com.databricks.backend.daemon.data.filesystem.MountEntryResolver.resolve(MountEntryResolver.scala:64)\n\t... 43 more\n\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292082&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     18</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     19</span>   <span class=\"ansi-red-fg\"># Log model</span>\n<span class=\"ansi-green-fg\">---&gt; 20</span><span class=\"ansi-red-fg\">   </span>mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>log_model<span class=\"ansi-blue-fg\">(</span>pipelineModel<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;log-model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     21</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">     22</span>   <span class=\"ansi-red-fg\"># Make predictions</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">log_model</span><span class=\"ansi-blue-fg\">(spark_model, artifact_path, conda_env, dfs_tmpdir, sample_input, registered_model_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    158</span>         spark_model<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>model_dir<span class=\"ansi-blue-fg\">,</span> _SPARK_MODEL_PATH_SUB<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    159</span>     <span class=\"ansi-green-fg\">except</span> Py4JJavaError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 160</span><span class=\"ansi-red-fg\">         return Model.log(artifact_path=artifact_path, flavor=mlflow.spark, spark_model=spark_model,\n</span><span class=\"ansi-green-intense-fg ansi-bold\">    161</span>                          conda_env<span class=\"ansi-blue-fg\">=</span>conda_env<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">,</span> sample_input<span class=\"ansi-blue-fg\">=</span>sample_input<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    162</span>                          registered_model_name=registered_model_name)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/models/__init__.py</span> in <span class=\"ansi-cyan-fg\">log</span><span class=\"ansi-blue-fg\">(cls, artifact_path, flavor, registered_model_name, **kwargs)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    100</span>             mlflow_model <span class=\"ansi-blue-fg\">=</span> cls<span class=\"ansi-blue-fg\">(</span>artifact_path<span class=\"ansi-blue-fg\">=</span>artifact_path<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">=</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>             flavor<span class=\"ansi-blue-fg\">.</span>save_model<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">=</span>local_path<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">=</span>mlflow_model<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 102</span><span class=\"ansi-red-fg\">             </span>mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_path<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    103</span>             <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>                 mlflow<span class=\"ansi-blue-fg\">.</span>tracking<span class=\"ansi-blue-fg\">.</span>fluent<span class=\"ansi-blue-fg\">.</span>_record_logged_model<span class=\"ansi-blue-fg\">(</span>mlflow_model<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/fluent.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    321</span>     &#34;&#34;&#34;\n<span class=\"ansi-green-intense-fg ansi-bold\">    322</span>     run_id <span class=\"ansi-blue-fg\">=</span> _get_or_start_run<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>run_id\n<span class=\"ansi-green-fg\">--&gt; 323</span><span class=\"ansi-red-fg\">     </span>MlflowClient<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    324</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    325</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    264</span>         <span class=\"ansi-blue-fg\">:</span>param artifact_path<span class=\"ansi-blue-fg\">:</span> If provided<span class=\"ansi-blue-fg\">,</span> the directory <span class=\"ansi-green-fg\">in</span><span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span>artifact_uri<span class=\"ansi-red-fg\">`</span><span class=\"ansi-red-fg\">`</span> to write to<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    265</span>         &#34;&#34;&#34;\n<span class=\"ansi-green-fg\">--&gt; 266</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_tracking_client<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">,</span> local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    268</span>     <span class=\"ansi-green-fg\">def</span> _record_logged_model<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> mlflow_model<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/_tracking_service/client.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, run_id, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    266</span>         run <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>get_run<span class=\"ansi-blue-fg\">(</span>run_id<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    267</span>         artifact_repo <span class=\"ansi-blue-fg\">=</span> get_artifact_repository<span class=\"ansi-blue-fg\">(</span>run<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">.</span>artifact_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 268</span><span class=\"ansi-red-fg\">         </span>artifact_repo<span class=\"ansi-blue-fg\">.</span>log_artifacts<span class=\"ansi-blue-fg\">(</span>local_dir<span class=\"ansi-blue-fg\">,</span> artifact_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    269</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">    270</span>     <span class=\"ansi-green-fg\">def</span> list_artifacts<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> run_id<span class=\"ansi-blue-fg\">,</span> path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">log_artifacts</span><span class=\"ansi-blue-fg\">(self, local_dir, artifact_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>             self<span class=\"ansi-blue-fg\">.</span>artifact_dir\n<span class=\"ansi-green-intense-fg ansi-bold\">     49</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 50</span><span class=\"ansi-red-fg\">             </span>mkdir<span class=\"ansi-blue-fg\">(</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>         dir_util<span class=\"ansi-blue-fg\">.</span>copy_tree<span class=\"ansi-blue-fg\">(</span>src<span class=\"ansi-blue-fg\">=</span>local_dir<span class=\"ansi-blue-fg\">,</span> dst<span class=\"ansi-blue-fg\">=</span>artifact_dir<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     52</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 106</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> e\n<span class=\"ansi-green-intense-fg ansi-bold\">    107</span>     <span class=\"ansi-green-fg\">return</span> target\n<span class=\"ansi-green-intense-fg ansi-bold\">    108</span> \n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/file_utils.py</span> in <span class=\"ansi-cyan-fg\">mkdir</span><span class=\"ansi-blue-fg\">(root, name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    101</span>     target <span class=\"ansi-blue-fg\">=</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>join<span class=\"ansi-blue-fg\">(</span>root<span class=\"ansi-blue-fg\">,</span> name<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-green-fg\">if</span> name <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span> <span class=\"ansi-green-fg\">else</span> root\n<span class=\"ansi-green-intense-fg ansi-bold\">    102</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 103</span><span class=\"ansi-red-fg\">         </span>os<span class=\"ansi-blue-fg\">.</span>makedirs<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    104</span>     <span class=\"ansi-green-fg\">except</span> OSError <span class=\"ansi-green-fg\">as</span> e<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    105</span>         <span class=\"ansi-green-fg\">if</span> e<span class=\"ansi-blue-fg\">.</span>errno <span class=\"ansi-blue-fg\">!=</span> errno<span class=\"ansi-blue-fg\">.</span>EEXIST <span class=\"ansi-green-fg\">or</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>isdir<span class=\"ansi-blue-fg\">(</span>target<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    211</span>     <span class=\"ansi-green-fg\">if</span> head <span class=\"ansi-green-fg\">and</span> tail <span class=\"ansi-green-fg\">and</span> <span class=\"ansi-green-fg\">not</span> path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    212</span>         <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 213</span><span class=\"ansi-red-fg\">             </span>makedirs<span class=\"ansi-blue-fg\">(</span>head<span class=\"ansi-blue-fg\">,</span> exist_ok<span class=\"ansi-blue-fg\">=</span>exist_ok<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    214</span>         <span class=\"ansi-green-fg\">except</span> FileExistsError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    215</span>             <span class=\"ansi-red-fg\"># Defeats race condition when another thread created the path</span>\n\n<span class=\"ansi-green-fg\">/usr/local/lib/python3.8/os.py</span> in <span class=\"ansi-cyan-fg\">makedirs</span><span class=\"ansi-blue-fg\">(name, mode, exist_ok)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    221</span>             <span class=\"ansi-green-fg\">return</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    222</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 223</span><span class=\"ansi-red-fg\">         </span>mkdir<span class=\"ansi-blue-fg\">(</span>name<span class=\"ansi-blue-fg\">,</span> mode<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    224</span>     <span class=\"ansi-green-fg\">except</span> OSError<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    225</span>         <span class=\"ansi-red-fg\"># Cannot rely on checking for EEXIST, since the operating system</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: [Errno 5] Input/output error: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159&#39;</div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["That's it! Now, let's use MLflow to easily look over our work and compare model performance. You can either query past runs programmatically or use the MLflow UI."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"d5012410-3047-428a-bbc2-c1385043d798"}}},{"cell_type":"markdown","source":["### Querying Past Runs\n\nYou can query past runs programatically in order to use this data back in Python.  The pathway to doing this is an `MlflowClient` object."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"a688fc82-1795-4fe0-951d-1131ce46c2be"}}},{"cell_type":"code","source":["%python\nfrom mlflow.tracking import MlflowClient\n\nclient = MlflowClient()"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"8a0a4349-23e3-4ce4-bf55-f198102837a0"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\nclient.list_experiments()"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"83c62246-22a0-4779-a845-438ba56e5f71"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">Out[19]: [&lt;Experiment: artifact_location=&#39;dbfs:/databricks/mlflow-tracking/2410754799131159&#39;, experiment_id=&#39;2410754799131159&#39;, lifecycle_stage=&#39;active&#39;, name=&#39;/Users/vsekar@cloudseclab2.com/tr-mlflow&#39;, tags={&#39;mlflow.AML_EXPERIMENT_ID&#39;: &#39;821c4222-c0a8-4ecc-be92-8bbf15046cd9&#39;,\n  &#39;mlflow.experimentType&#39;: &#39;MLFLOW_EXPERIMENT&#39;,\n  &#39;mlflow.ownerEmail&#39;: &#39;vsekar@cloudseclab2.com&#39;,\n  &#39;mlflow.ownerId&#39;: &#39;76425268498060&#39;}&gt;]</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[19]: [&lt;Experiment: artifact_location=&#39;dbfs:/databricks/mlflow-tracking/2410754799131159&#39;, experiment_id=&#39;2410754799131159&#39;, lifecycle_stage=&#39;active&#39;, name=&#39;/Users/vsekar@cloudseclab2.com/tr-mlflow&#39;, tags={&#39;mlflow.AML_EXPERIMENT_ID&#39;: &#39;821c4222-c0a8-4ecc-be92-8bbf15046cd9&#39;,\n  &#39;mlflow.experimentType&#39;: &#39;MLFLOW_EXPERIMENT&#39;,\n  &#39;mlflow.ownerEmail&#39;: &#39;vsekar@cloudseclab2.com&#39;,\n  &#39;mlflow.ownerId&#39;: &#39;76425268498060&#39;}&gt;]</div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["You can also use [search_runs](https://mlflow.org/docs/latest/search-syntax.html) to find all runs for a given experiment."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"c8fd3c55-502e-4230-916c-f0c2aaa93374"}}},{"cell_type":"code","source":["%python\nexperiment_id = run.info.experiment_id\nruns_df = mlflow.search_runs(experiment_id)\n\ndisplay(runs_df)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"4cbcbbf2-45c4-4431-8403-697718fe45bc"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"overflow":false,"datasetInfos":[],"data":[["d7c10726314747d8b35bcbac8fd9f1b1","2410754799131159","FAILED","dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts","2021-09-14T15:01:46.815+0000","2021-09-14T15:02:15.945+0000","log-price","vsekar@cloudseclab2.com","1631631736719","/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow","/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow","LR-Log-Price","NOTEBOOK","3013059022292070","https://eastus-c3.azuredatabricks.net"],["028a2a905e1b4945913fe394302cfc65","2410754799131159","FAILED","dbfs:/databricks/mlflow-tracking/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts","2021-09-14T15:01:08.338+0000","2021-09-14T15:01:46.084+0000",null,"vsekar@cloudseclab2.com","1631631706712","/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow","/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow","LR-All-Features","NOTEBOOK","3013059022292070","https://eastus-c3.azuredatabricks.net"],["15d480e27076453695920bba27b14152","2410754799131159","FAILED","dbfs:/databricks/mlflow-tracking/2410754799131159/15d480e27076453695920bba27b14152/artifacts","2021-09-14T15:00:44.148+0000","2021-09-14T15:00:52.714+0000","price-bedrooms","vsekar@cloudseclab2.com","1631631653696","/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow","/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow","LR-Single-Feature","NOTEBOOK","3013059022292070","https://eastus-c3.azuredatabricks.net"]],"plotOptions":{"displayType":"table","customPlotOptions":{},"pivotColumns":[],"pivotAggregation":null,"xColumns":[],"yColumns":[]},"columnCustomDisplayInfos":{},"aggType":"","isJsonSchema":true,"removedWidgets":[],"aggSchema":[],"schema":[{"name":"run_id","type":"\"string\"","metadata":"{}"},{"name":"experiment_id","type":"\"string\"","metadata":"{}"},{"name":"status","type":"\"string\"","metadata":"{}"},{"name":"artifact_uri","type":"\"string\"","metadata":"{}"},{"name":"start_time","type":"\"timestamp\"","metadata":"{}"},{"name":"end_time","type":"\"timestamp\"","metadata":"{}"},{"name":"params.label","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.user","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.databricks.notebookRevisionID","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.source.name","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.databricks.notebookPath","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.runName","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.source.type","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.databricks.notebookID","type":"\"string\"","metadata":"{}"},{"name":"tags.mlflow.databricks.webappURL","type":"\"string\"","metadata":"{}"}],"aggError":"","aggData":[],"addedWidgets":{},"metadata":{},"dbfsResultPath":null,"type":"table","aggOverflow":false,"aggSeriesLimitReached":false,"arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>run_id</th><th>experiment_id</th><th>status</th><th>artifact_uri</th><th>start_time</th><th>end_time</th><th>params.label</th><th>tags.mlflow.user</th><th>tags.mlflow.databricks.notebookRevisionID</th><th>tags.mlflow.source.name</th><th>tags.mlflow.databricks.notebookPath</th><th>tags.mlflow.runName</th><th>tags.mlflow.source.type</th><th>tags.mlflow.databricks.notebookID</th><th>tags.mlflow.databricks.webappURL</th></tr></thead><tbody><tr><td>d7c10726314747d8b35bcbac8fd9f1b1</td><td>2410754799131159</td><td>FAILED</td><td>dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts</td><td>2021-09-14T15:01:46.815+0000</td><td>2021-09-14T15:02:15.945+0000</td><td>log-price</td><td>vsekar@cloudseclab2.com</td><td>1631631736719</td><td>/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow</td><td>/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow</td><td>LR-Log-Price</td><td>NOTEBOOK</td><td>3013059022292070</td><td>https://eastus-c3.azuredatabricks.net</td></tr><tr><td>028a2a905e1b4945913fe394302cfc65</td><td>2410754799131159</td><td>FAILED</td><td>dbfs:/databricks/mlflow-tracking/2410754799131159/028a2a905e1b4945913fe394302cfc65/artifacts</td><td>2021-09-14T15:01:08.338+0000</td><td>2021-09-14T15:01:46.084+0000</td><td>null</td><td>vsekar@cloudseclab2.com</td><td>1631631706712</td><td>/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow</td><td>/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow</td><td>LR-All-Features</td><td>NOTEBOOK</td><td>3013059022292070</td><td>https://eastus-c3.azuredatabricks.net</td></tr><tr><td>15d480e27076453695920bba27b14152</td><td>2410754799131159</td><td>FAILED</td><td>dbfs:/databricks/mlflow-tracking/2410754799131159/15d480e27076453695920bba27b14152/artifacts</td><td>2021-09-14T15:00:44.148+0000</td><td>2021-09-14T15:00:52.714+0000</td><td>price-bedrooms</td><td>vsekar@cloudseclab2.com</td><td>1631631653696</td><td>/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow</td><td>/Users/vsekar@cloudseclab2.com/mlflow/1. MLflow</td><td>LR-Single-Feature</td><td>NOTEBOOK</td><td>3013059022292070</td><td>https://eastus-c3.azuredatabricks.net</td></tr></tbody></table></div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["Pull the last run and look at metrics."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"75ec5aa3-dff3-447a-94b2-c5914aa38cbe"}}},{"cell_type":"code","source":["%python\nruns = client.search_runs(experiment_id, order_by=[\"attributes.start_time desc\"], max_results=1)\nruns[0].data.metrics"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"113a16dc-6595-4ba1-a4e0-8155b7d0f2ef"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">Out[21]: {}</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[21]: {}</div>"]}}],"execution_count":0},{"cell_type":"code","source":["%python\nrun_id = runs[0].info.run_id\n# display_run_uri(run.info.experiment_id, run_id)"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"bdcf0e49-b3ce-4290-9856-f19d1f9ddaec"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\"></div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["-sandbox\nExamine the results in the UI.  Look for the following:<br><br>\n\n1. The `Experiment ID`\n2. The artifact location.  This is where the artifacts are stored in DBFS.\n3. The time the run was executed.  **Click this to see more information on the run.**\n4. The code that executed the run.\n\n\nAfter clicking on the time of the run, take a look at the following:<br><br>\n\n1. The Run ID will match what we printed above\n2. The model that we saved, included a pickled version of the model as well as the Conda environment and the `MLmodel` file.\n\nNote that you can add notes under the \"Notes\" tab to help keep track of important information about your models. \n\nAlso, click on the run for the log normal distribution and see that the histogram is saved in \"Artifacts\"."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"a46b4bfa-4109-43c9-920f-51d118987b9a"}}},{"cell_type":"markdown","source":["### Load Saved Model\n\nLet's practice [loading](https://www.mlflow.org/docs/latest/python_api/mlflow.spark.html) our logged log-normal model."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"04955131-6929-41a3-a759-9c15a478dc4e"}}},{"cell_type":"code","source":["%python\n\nloaded_model = mlflow.spark.load_model(f\"runs:/{run.info.run_uuid}/log-model\")\ndisplay(loaded_model.transform(testDF))"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"d06bd840-cdf9-4f95-ba2e-b6e82281d68c"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">2021/09/14 15:02:44 INFO mlflow.spark: &#39;runs:/d7c10726314747d8b35bcbac8fd9f1b1/log-model&#39; resolved as &#39;dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model&#39;\n</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">2021/09/14 15:02:44 INFO mlflow.spark: &#39;runs:/d7c10726314747d8b35bcbac8fd9f1b1/log-model&#39; resolved as &#39;dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model&#39;\n</div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/model_utils.py</span> in <span class=\"ansi-cyan-fg\">_get_flavor_configuration_from_uri</span><span class=\"ansi-blue-fg\">(model_uri, flavor_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 49</span><span class=\"ansi-red-fg\">         ml_model_file = _download_artifact_from_uri(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">     50</span>             artifact_uri=append_to_uri_path(model_uri, &#34;MLmodel&#34;))\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/artifact_utils.py</span> in <span class=\"ansi-cyan-fg\">_download_artifact_from_uri</span><span class=\"ansi-blue-fg\">(artifact_uri, output_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     74</span> \n<span class=\"ansi-green-fg\">---&gt; 75</span><span class=\"ansi-red-fg\">     return get_artifact_repository(artifact_uri=root_uri).download_artifacts(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">     76</span>         artifact_path=artifact_path, dst_path=output_path)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">download_artifacts</span><span class=\"ansi-blue-fg\">(self, artifact_path, dst_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     71</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>local_artifact_path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 72</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> IOError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#39;No such file or directory: \\&#39;{}\\&#39;&#39;</span><span class=\"ansi-blue-fg\">.</span>format<span class=\"ansi-blue-fg\">(</span>local_artifact_path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     73</span>         <span class=\"ansi-green-fg\">return</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>abspath<span class=\"ansi-blue-fg\">(</span>local_artifact_path<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: No such file or directory: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/MLmodel&#39;\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">MlflowException</span>                           Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292094&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span><span class=\"ansi-red-fg\"> </span>loaded_model <span class=\"ansi-blue-fg\">=</span> mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>load_model<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">f&#34;runs:/{run.info.run_uuid}/log-model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      2</span> display<span class=\"ansi-blue-fg\">(</span>loaded_model<span class=\"ansi-blue-fg\">.</span>transform<span class=\"ansi-blue-fg\">(</span>testDF<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">load_model</span><span class=\"ansi-blue-fg\">(model_uri, dfs_tmpdir)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    437</span>         model_uri <span class=\"ansi-blue-fg\">=</span> ModelsArtifactRepository<span class=\"ansi-blue-fg\">.</span>get_underlying_uri<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    438</span>         _logger<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;&#39;%s&#39; resolved as &#39;%s&#39;&#34;</span><span class=\"ansi-blue-fg\">,</span> runs_uri<span class=\"ansi-blue-fg\">,</span> model_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 439</span><span class=\"ansi-red-fg\">     </span>flavor_conf <span class=\"ansi-blue-fg\">=</span> _get_flavor_configuration_from_uri<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">,</span> FLAVOR_NAME<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    440</span>     model_uri <span class=\"ansi-blue-fg\">=</span> append_to_uri_path<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">,</span> flavor_conf<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-blue-fg\">&#34;model_data&#34;</span><span class=\"ansi-blue-fg\">]</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    441</span>     <span class=\"ansi-green-fg\">return</span> _load_model<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">=</span>model_uri<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/model_utils.py</span> in <span class=\"ansi-cyan-fg\">_get_flavor_configuration_from_uri</span><span class=\"ansi-blue-fg\">(model_uri, flavor_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     50</span>             artifact_uri=append_to_uri_path(model_uri, &#34;MLmodel&#34;))\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>     <span class=\"ansi-green-fg\">except</span> Exception <span class=\"ansi-green-fg\">as</span> ex<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 52</span><span class=\"ansi-red-fg\">         raise MlflowException(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">     53</span>             &#34;Failed to download an \\&#34;MLmodel\\&#34; model file from \\&#34;{model_uri}\\&#34;: {ex}&#34;.format(\n<span class=\"ansi-green-intense-fg ansi-bold\">     54</span>                 model_uri=model_uri, ex=ex),\n\n<span class=\"ansi-red-fg\">MlflowException</span>: Failed to download an &#34;MLmodel&#34; model file from &#34;dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model&#34;: No such file or directory: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/MLmodel&#39;</div>","errorSummary":"<span class=\"ansi-red-fg\">MlflowException</span>: Failed to download an &#34;MLmodel&#34; model file from &#34;dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model&#34;: No such file or directory: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/MLmodel&#39;","metadata":{},"errorTraceType":"html","type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/model_utils.py</span> in <span class=\"ansi-cyan-fg\">_get_flavor_configuration_from_uri</span><span class=\"ansi-blue-fg\">(model_uri, flavor_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     48</span>     <span class=\"ansi-green-fg\">try</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 49</span><span class=\"ansi-red-fg\">         ml_model_file = _download_artifact_from_uri(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">     50</span>             artifact_uri=append_to_uri_path(model_uri, &#34;MLmodel&#34;))\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/tracking/artifact_utils.py</span> in <span class=\"ansi-cyan-fg\">_download_artifact_from_uri</span><span class=\"ansi-blue-fg\">(artifact_uri, output_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     74</span> \n<span class=\"ansi-green-fg\">---&gt; 75</span><span class=\"ansi-red-fg\">     return get_artifact_repository(artifact_uri=root_uri).download_artifacts(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">     76</span>         artifact_path=artifact_path, dst_path=output_path)\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/store/artifact/local_artifact_repo.py</span> in <span class=\"ansi-cyan-fg\">download_artifacts</span><span class=\"ansi-blue-fg\">(self, artifact_path, dst_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     71</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>exists<span class=\"ansi-blue-fg\">(</span>local_artifact_path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 72</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">raise</span> IOError<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#39;No such file or directory: \\&#39;{}\\&#39;&#39;</span><span class=\"ansi-blue-fg\">.</span>format<span class=\"ansi-blue-fg\">(</span>local_artifact_path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     73</span>         <span class=\"ansi-green-fg\">return</span> os<span class=\"ansi-blue-fg\">.</span>path<span class=\"ansi-blue-fg\">.</span>abspath<span class=\"ansi-blue-fg\">(</span>local_artifact_path<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-red-fg\">OSError</span>: No such file or directory: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/MLmodel&#39;\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">MlflowException</span>                           Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-3013059022292094&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span><span class=\"ansi-red-fg\"> </span>loaded_model <span class=\"ansi-blue-fg\">=</span> mlflow<span class=\"ansi-blue-fg\">.</span>spark<span class=\"ansi-blue-fg\">.</span>load_model<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">f&#34;runs:/{run.info.run_uuid}/log-model&#34;</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      2</span> display<span class=\"ansi-blue-fg\">(</span>loaded_model<span class=\"ansi-blue-fg\">.</span>transform<span class=\"ansi-blue-fg\">(</span>testDF<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/spark.py</span> in <span class=\"ansi-cyan-fg\">load_model</span><span class=\"ansi-blue-fg\">(model_uri, dfs_tmpdir)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    437</span>         model_uri <span class=\"ansi-blue-fg\">=</span> ModelsArtifactRepository<span class=\"ansi-blue-fg\">.</span>get_underlying_uri<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    438</span>         _logger<span class=\"ansi-blue-fg\">.</span>info<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;&#39;%s&#39; resolved as &#39;%s&#39;&#34;</span><span class=\"ansi-blue-fg\">,</span> runs_uri<span class=\"ansi-blue-fg\">,</span> model_uri<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 439</span><span class=\"ansi-red-fg\">     </span>flavor_conf <span class=\"ansi-blue-fg\">=</span> _get_flavor_configuration_from_uri<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">,</span> FLAVOR_NAME<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    440</span>     model_uri <span class=\"ansi-blue-fg\">=</span> append_to_uri_path<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">,</span> flavor_conf<span class=\"ansi-blue-fg\">[</span><span class=\"ansi-blue-fg\">&#34;model_data&#34;</span><span class=\"ansi-blue-fg\">]</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    441</span>     <span class=\"ansi-green-fg\">return</span> _load_model<span class=\"ansi-blue-fg\">(</span>model_uri<span class=\"ansi-blue-fg\">=</span>model_uri<span class=\"ansi-blue-fg\">,</span> dfs_tmpdir<span class=\"ansi-blue-fg\">=</span>dfs_tmpdir<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/python/lib/python3.8/site-packages/mlflow/utils/model_utils.py</span> in <span class=\"ansi-cyan-fg\">_get_flavor_configuration_from_uri</span><span class=\"ansi-blue-fg\">(model_uri, flavor_name)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">     50</span>             artifact_uri=append_to_uri_path(model_uri, &#34;MLmodel&#34;))\n<span class=\"ansi-green-intense-fg ansi-bold\">     51</span>     <span class=\"ansi-green-fg\">except</span> Exception <span class=\"ansi-green-fg\">as</span> ex<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">---&gt; 52</span><span class=\"ansi-red-fg\">         raise MlflowException(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">     53</span>             &#34;Failed to download an \\&#34;MLmodel\\&#34; model file from \\&#34;{model_uri}\\&#34;: {ex}&#34;.format(\n<span class=\"ansi-green-intense-fg ansi-bold\">     54</span>                 model_uri=model_uri, ex=ex),\n\n<span class=\"ansi-red-fg\">MlflowException</span>: Failed to download an &#34;MLmodel&#34; model file from &#34;dbfs:/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model&#34;: No such file or directory: &#39;/dbfs/databricks/mlflow-tracking/2410754799131159/d7c10726314747d8b35bcbac8fd9f1b1/artifacts/log-model/MLmodel&#39;</div>"]}}],"execution_count":0},{"cell_type":"markdown","source":["### Log Param, Metrics, and Artifacts\n\nNow it's your turn! Log your name, your height, and a fun [matplotlib visualization](https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/scatter_with_legend.html#sphx-glr-gallery-lines-bars-and-markers-scatter-with-legend-py) (by calling the `generate_plot` function below - feel free to modify the viz!) under a run with name `MLflow-Lab` in our new MLflow experiment."],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"a1e4dce1-ee39-4cc4-b427-ebc9436a7125"}}},{"cell_type":"code","source":["%python\ndef generate_plot():\n  import numpy as np\n  np.random.seed(19680801)\n  import matplotlib.pyplot as plt\n\n  fig, ax = plt.subplots()\n  for color in ['tab:blue', 'tab:orange', 'tab:green']:\n      n = 750\n      x, y = np.random.rand(2, n)\n      scale = 200.0 * np.random.rand(n)\n      ax.scatter(x, y, c=color, s=scale, label=color,\n                 alpha=0.3, edgecolors='none')\n\n  ax.legend()\n  ax.grid(True)\n#   display(plt.show())\n  return fig, plt\n\ngenerate_plot()"],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"2685ea67-b37c-4e42-9108-530f9a122b72"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">Out[24]: </div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[24]: </div>"]}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"/plots/5b403c0c-0f6d-43ba-a708-b58f025ec491.png","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"image","arguments":{}}},"output_type":"display_data","data":{"image/png":""}},{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"datasetInfos":[],"data":"<div class=\"ansiout\">(&lt;Figure size 432x288 with 1 Axes&gt;,\n &lt;module &#39;matplotlib.pyplot&#39; from &#39;/databricks/python/lib/python3.8/site-packages/matplotlib/pyplot.py&#39;&gt;)</div>","removedWidgets":[],"addedWidgets":{},"metadata":{},"type":"html","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">(&lt;Figure size 432x288 with 1 Axes&gt;,\n &lt;module &#39;matplotlib.pyplot&#39; from &#39;/databricks/python/lib/python3.8/site-packages/matplotlib/pyplot.py&#39;&gt;)</div>"]}}],"execution_count":0},{"cell_type":"code","source":[""],"metadata":{"application/vnd.databricks.v1+cell":{"title":"","showTitle":false,"inputWidgets":{},"nuid":"7d75aab5-abaa-4452-b079-778b27c9e2ee"}},"outputs":[{"output_type":"display_data","metadata":{"application/vnd.databricks.v1+output":{"data":"","errorSummary":"","metadata":{},"errorTraceType":null,"type":"ipynbError","arguments":{}}},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>"]}}],"execution_count":0}],"metadata":{"application/vnd.databricks.v1+notebook":{"notebookName":"1. MLflow","dashboards":[],"notebookMetadata":{"pythonIndentUnit":2},"language":"python","widgets":{},"notebookOrigID":3013059022292070}},"nbformat":4,"nbformat_minor":0}
